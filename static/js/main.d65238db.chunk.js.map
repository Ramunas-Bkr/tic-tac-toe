{"version":3,"sources":["Components/Square.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","style","className","onClick","state","initialState","App","useState","gameState","setGameState","isX","setIsX","onSquareClick","index","strings","Array","from","useEffect","winner","checkWinner","alert","lines","i","length","a","b","c","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0KAaeA,EAXA,SAACC,GAEZ,IAAMC,EAAQD,EAAME,UAAN,UAAqBF,EAAME,UAA3B,WAAgD,SAE9D,OACI,0BAAMA,UAAWD,EAAOE,QAASH,EAAMG,SAClCH,EAAMI,QCLbC,EAAe,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IA2EvCC,MAzEf,WAAgB,IAAD,EAEqBC,mBAASF,GAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGSF,oBAAS,GAHlB,mBAGNG,EAHM,KAGDC,EAHC,KAKPC,EAAgB,SAACC,GACrB,GAAKL,EAAUK,GAMb,OAAO,KALP,IAAIC,EAAUC,MAAMC,KAAKR,GACzBM,EAAQD,GAASH,EAAM,IAAM,IAC7BD,EAAaK,GACbH,GAAQD,IAWZO,qBAAU,WACR,IAAMC,EAASC,IACXD,IACFE,MAAM,oBAAD,OAAqBF,EAArB,oBACLT,EAAaJ,MAGd,CAACG,IAEJ,IAAMW,EAAc,WAWlB,IAVA,IAAME,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACnBD,EAAMC,GADa,GAC9BE,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIlB,EAAUgB,IAAMhB,EAAUgB,KAAOhB,EAAUiB,IAAMjB,EAAUgB,KAAOhB,EAAUkB,GAC5E,OAAOlB,EAAUgB,GAGvB,OAAO,MAGT,OACE,yBAAKtB,UAAU,cACb,uBAAGA,UAAU,gBAAb,qBACA,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CAAQA,UAAU,iBAAiBE,MAAOI,EAAU,GAAIL,QAAS,kBAAMS,EAAc,MACrF,kBAAC,EAAD,CAAQV,UAAU,iBAAiBE,MAAOI,EAAU,GAAIL,QAAS,kBAAMS,EAAc,MACrF,kBAAC,EAAD,CAAQV,UAAU,WAAWE,MAAOI,EAAU,GAAIL,QAAS,kBAAMS,EAAc,OAEjF,yBAAKV,UAAU,iBACb,kBAAC,EAAD,CAAQA,UAAU,iBAAiBE,MAAOI,EAAU,GAAIL,QAAS,kBAAMS,EAAc,MACrF,kBAAC,EAAD,CAAQV,UAAU,iBAAiBE,MAAOI,EAAU,GAAIL,QAAS,kBAAMS,EAAc,MACrF,kBAAC,EAAD,CAAQV,UAAU,WAAWE,MAAOI,EAAU,GAAIL,QAAS,kBAAMS,EAAc,OAEjF,yBAAKV,UAAU,iBACb,kBAAC,EAAD,CAAQA,UAAU,UAAUE,MAAOI,EAAU,GAAIL,QAAS,kBAAMS,EAAc,MAC9E,kBAAC,EAAD,CAAQV,UAAU,UAAUE,MAAOI,EAAU,GAAIL,QAAS,kBAAMS,EAAc,MAC9E,kBAAC,EAAD,CAAQR,MAAOI,EAAU,GAAIL,QAAS,kBAAMS,EAAc,OAE5D,4BAAQV,UAAU,eAAeC,QAAS,kBAnD5CM,EAAaJ,QACbM,GAAO,KAkDL,gBC7DcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d65238db.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Square = (props) => {\r\n\r\n    const style = props.className ? `${props.className} square` : 'square';\r\n\r\n    return (\r\n        <span className={style} onClick={props.onClick}>\r\n            {props.state}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Square\r\n","import React, {useState, useEffect} from 'react';\nimport Square from './Components/Square';\n\nconst initialState = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n\nfunction App() {\n\n  const [gameState, setGameState] = useState(initialState);\n  const [isX, setIsX] = useState(false);\n\n  const onSquareClick = (index) => {\n    if (!gameState[index]) {\n      let strings = Array.from(gameState);\n      strings[index] = isX ? \"X\" : \"O\";\n      setGameState(strings);\n      setIsX(!isX);\n    } else {\n      return null;\n    }\n  }\n\n  const clearGame = () => {\n    setGameState(initialState);\n    setIsX(false);\n  }\n\n  useEffect(() => {\n    const winner = checkWinner();\n    if (winner) {\n      alert(`Congratulations! ${winner} won this game!`);\n      setGameState(initialState);\n    }\n    // eslint-disable-next-line\n  }, [gameState])\n\n  const checkWinner = () => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (gameState[a] && gameState[a] === gameState[b] && gameState[a] === gameState[c]) {\n          return gameState[a]\n        }\n    }\n    return null\n  }\n\n  return (\n    <div className=\"app-header\">\n      <p className=\"heading-text\">React TIC-TAC-TOE</p>\n      <div className=\"row jc-center\">\n        <Square className=\"b-bottom-right\" state={gameState[0]} onClick={() => onSquareClick(0)} />\n        <Square className=\"b-bottom-right\" state={gameState[1]} onClick={() => onSquareClick(1)} />\n        <Square className=\"b-bottom\" state={gameState[2]} onClick={() => onSquareClick(2)} />\n      </div>\n      <div className=\"row jc-center\">\n        <Square className=\"b-bottom-right\" state={gameState[3]} onClick={() => onSquareClick(3)} />\n        <Square className=\"b-bottom-right\" state={gameState[4]} onClick={() => onSquareClick(4)} />\n        <Square className=\"b-bottom\" state={gameState[5]} onClick={() => onSquareClick(5)} />\n      </div>\n      <div className=\"row jc-center\">\n        <Square className=\"b-right\" state={gameState[6]} onClick={() => onSquareClick(6)} />\n        <Square className=\"b-right\" state={gameState[7]} onClick={() => onSquareClick(7)} />\n        <Square state={gameState[8]} onClick={() => onSquareClick(8)} />\n      </div>\n      <button className=\"clear-button\" onClick={() => clearGame()}>Clear Game</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}